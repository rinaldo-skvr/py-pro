# ansible/deploy-blindassist.yml
---
- name: Deploy 3Netra POC Application to Orange Pi Zero 2W
  hosts: orangepi_target
  become: yes
  gather_facts: no
  
  vars:
    app_user: blindassist
    app_dir: /opt/blindassist
    service_name: blindassist
    python_version: "3.10"
    github_sha: "{{ github_sha | default('unknown') }}"
    build_date: "{{ build_date | default('unknown') }}"

  tasks:
    - name: Gather facts
      setup:

    - name: Update package cache
      apt:
        update_cache: yes
        cache_valid_time: 3600

    - name: Install system dependencies
      apt:
        name:
          # Python and development tools
          - python3
          - python3-pip
          - python3-venv
          - python3-dev
          - python3-setuptools
          - build-essential
          - cmake
          - pkg-config
          
          # GDAL libraries
          - gdal-bin
          - libgdal-dev
          
          # Computer vision libraries
          - libopencv-dev
          - python3-opencv
          - libjpeg-dev
          - libpng-dev
          - libtiff-dev
          - libavcodec-dev
          - libavformat-dev
          - libswscale-dev
          - libv4l-dev
          
          # Audio libraries
          - libasound2-dev
          - libjack-dev
          - libsndfile1-dev
          - portaudio19-dev
          - espeak
          - espeak-data
          - pulseaudio
          - alsa-utils
          
          # GUI and graphics libraries
          - libcairo2-dev
          - libgdk-pixbuf2.0-dev
          - libglib2.0-dev
          - libcups2-dev
          - libxml2-dev
          - libpoppler-glib-dev
          
          # System libraries
          - libdbus-1-dev
          - libgirepository1.0-dev
          - libgobject-2.0-dev
          - libglib2.0-dev
          - libffi-dev
          
          # Bluetooth
          - bluetooth
          - bluez
          - bluez-tools
          - pulseaudio-module-bluetooth
          
          # Hardware interfaces
          - wiringpi
          
          # Network and media
          - network-manager
          - gstreamer1.0-tools
          - gstreamer1.0-plugins-base
          
          # System utilities
          - git
          - curl
          - wget
          - nano
          - htop
          - v4l-utils
          - i2c-tools
          - usbutils
          - systemd
          - openssh-server
        state: present

    - name: Install additional build dependencies
      apt:
        name:
          - python3-wheel
          - python3-setuptools
          - python3-distutils
          - python3-numpy-dev
          - libffi-dev
          - libssl-dev
          - libbz2-dev
          - libreadline-dev
          - libsqlite3-dev
          - libncurses5-dev
          - libncursesw5-dev
          - xz-utils
          - tk-dev
          - libxml2-dev
          - libxmlsec1-dev
          - libffi-dev
          - liblzma-dev
          - zlib1g-dev
          - libjpeg8-dev
          - libfreetype6-dev
          - liblcms2-dev
          - libwebp-dev
          - libharfbuzz-dev
          - libfribidi-dev
          - libxcb1-dev
        state: present

    - name: Create required system groups
      group:
        name: "{{ item }}"
        state: present
      loop:
        - gpio
        - i2c
        - spi
        - bluetooth
        - pulse-access
        - audio
        - video
        - dialout

    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: yes
        home: "{{ app_dir }}"
        shell: /bin/bash
        groups: audio,video,dialout,gpio,i2c,spi,bluetooth,pulse-access
        append: yes

    - name: Create googlenv Python virtual environment
      command: python3 -m venv /home/orangepi/googlenv
      args:
        creates: /home/orangepi/googlenv/bin/activate

    - name: Upgrade pip in googlenv virtual environment
      pip:
        name: pip
        state: latest
        virtualenv: /home/orangepi/googlenv


    - name: Create application directory structure
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_dir }}"
        - "{{ app_dir }}/app"
        - "{{ app_dir }}/config"
        - "{{ app_dir }}/logs"
        - /var/log/blindassist
        
    - name: Copy application source code
      copy:
        src: "{{ playbook_dir }}/../src/"
        dest: "{{ app_dir }}/app/"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      when: ansible_check_mode == false

    - name: Install setuptools and wheel in googlenv virtual environment
      command: /home/orangepi/googlenv/bin/pip install --upgrade setuptools wheel
      args:
        creates: /home/orangepi/googlenv/lib/python3.10/site-packages/setuptools

    - name: Install essential packages only
      command: /home/orangepi/googlenv/bin/pip install fastapi uvicorn pydantic requests numpy opencv-python pyttsx3 gtts
      args:
        creates: /home/orangepi/googlenv/lib/python3.10/site-packages/fastapi

    - name: Install core dependencies individually
      command: /home/orangepi/googlenv/bin/pip install "{{ item }}" --no-cache-dir
      loop:
        - "PyYAML==6.0.1"
        - "Cython"
        - "pillow==10.4.0"
        - "matplotlib==3.10.1"
        - "scikit-learn==1.6.1"
        - "scipy==1.15.1"
        - "pandas==2.2.3"
        - "seaborn==0.13.2"
        - "sounddevice==0.4.6"
        - "soundfile==0.12.1"
        - "pygame==2.5.2"
        - "pyserial==3.5"
        - "psutil==5.9.0"
        - "python-dotenv==1.0.1"
        - "tqdm==4.66.5"
        - "sounddevice==0.4.6"
        - "soundfile==0.12.1"
      ignore_errors: yes
      register: core_deps_result

    - name: Install optional dependencies (may fail)
      command: /home/orangepi/googlenv/bin/pip install "{{ item }}" --no-cache-dir
      loop:
        - "dbus-python"
        - "dlib"
        - "wrapt==1.12.1"
        - "GDAL==3.8.4"
        - "pytesseract==0.3.10"
        - "pyA20"
        - "PyAudio"
        - "reportlab"
        - "typed-ast"
        - "pygobject"
        - "face-recognition==1.3.0"
        - "ultralytics==8.3.81"
        - "torch==2.6.0"
        - "torchvision==0.21.0"
        - "matplotlib==3.10.1"
        - "pandas==2.2.3"
        - "scikit-learn==1.6.1"
      ignore_errors: yes
      register: optional_deps_result

    - name: Display installation results
      debug:
        msg:
          - "Core dependencies installed: {{ core_deps_result.results | selectattr('failed', 'equalto', false) | list | length }}"
          - "Optional dependencies installed: {{ optional_deps_result.results | selectattr('failed', 'equalto', false) | list | length }}"

    - name: Install Python dependencies in googlenv virtual environment (with retry)
      command: /home/orangepi/googlenv/bin/pip install -r "{{ app_dir }}/app/requirements.txt" --no-cache-dir --timeout 300
      retries: 3
      delay: 10
      until: true

    # - name: Install playsound with fallback
    #   command: /home/orangepi/googlenv/bin/pip install playsound
    #   args:
    #     creates: /home/orangepi/googlenv/lib/python3.10/site-packages/playsound
    #   ignore_errors: yes
    #   register: playsound_result

    # - name: Install alternative audio package if playsound fails
    #   command: /home/orangepi/googlenv/bin/pip install pygame
    #   args:
    #     creates: /home/orangepi/googlenv/lib/python3.10/site-packages/pygame
    #   when: playsound_result.failed

    - name: Create application configuration
      copy:
        dest: "{{ app_dir }}/config/config.yml"
        content: |
          # BlindAssist Configuration
          app:
            name: "BlindAssist"
            version: "1.0.0"
            debug: false
          
          camera:
            device_id: 0
            width: 640
            height: 480
            fps: 30
          
          audio:
            output_device: "default"
            volume: 0.8
            voice_language: "en"
        mode: '0644'

    - name: Create startup script
      copy:
        dest: "{{ app_dir }}/app/start.sh"
        content: |
          #!/bin/bash
          cd "{{ app_dir }}/app"
          source /home/orangepi/googlenv/bin/activate
          exec uvicorn main:app --host 0.0.0.0 --port 8000
        mode: '0755'
        owner: "{{ app_user }}"
        group: "{{ app_user }}"

    - name: Create systemd service
      copy:
        dest: /etc/systemd/system/{{ service_name }}.service
        content: |
          [Unit]
          Description=3Netra BlindAssist Service
          After=network.target

          [Service]
          Type=simple
          User={{ app_user }}
          Group={{ app_user }}
          WorkingDirectory={{ app_dir }}/app
          ExecStart={{ app_dir }}/app/start.sh
          Restart=always
          RestartSec=3

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Enable and start service
      systemd:
        name: "{{ service_name }}"
        enabled: yes
        state: started
        daemon_reload: yes

    # - name: Configure audio permissions
    #   copy:
    #     content: |
    #       # Audio configuration for BlindAssist user
    #       {{ app_user }} ALL=(ALL) NOPASSWD: /usr/bin/amixer, /usr/bin/aplay, /usr/bin/espeak
    #     dest: "/etc/sudoers.d/{{ app_user }}-audio"
    #     mode: '0440'
    #     validate: 'visudo -cf %s'

    # - name: Configure camera permissions
    #   copy:
    #     content: |
    #       # Camera permissions for BlindAssist
    #       SUBSYSTEM=="video4linux", GROUP="video", MODE="0664"
    #       KERNEL=="video[0-9]*", GROUP="video", MODE="0664"
    #     dest: /etc/udev/rules.d/99-blindassist-camera.rules
    #     mode: '0644'

    # - name: Enable required kernel modules
    #   lineinfile:
    #     path: /etc/modules
    #     line: "{{ item }}"
    #     create: yes
    #   loop:
    #     - snd-aloop
    #     - v4l2loopback

    # - name: Configure boot parameters for Orange Pi Zero 2W
    #   lineinfile:
    #     path: /boot/armbianEnv.txt
    #     regexp: '^{{ item.key }}='
    #     line: '{{ item.key }}={{ item.value }}'
    #     create: yes
    #   loop:
    #     - { key: 'overlays', value: 'i2c1 i2c3 spi-spidev uart1 usbhost2 usbhost3' }
    #     - { key: 'param_i2c1_bus', value: 'on' }
    #     - { key: 'param_i2c3_bus', value: 'on' }
    #     - { key: 'param_spi_bus', value: 'on' }

    # - name: Create version and build info
    #   copy:
    #     content: |
    #       BLINDASSIST_VERSION=1.0.0
    #       BUILD_DATE={{ build_date }}
    #       GITHUB_SHA={{ github_sha }}
    #       BUILT_BY=GitHub Actions
    #       TARGET_DEVICE=Orange Pi Zero 2W
    #       BASE_IMAGE=Orangepizero2w_1.0.0_ubuntu_jammy_server_linux6.1.31
    #       ANSIBLE_PLAYBOOK_VERSION=1.0
    #     dest: "{{ app_dir }}/build-info.txt"
    #     owner: "{{ app_user }}"
    #     group: "{{ app_user }}"
    #     mode: '0644'

    # - name: Configure log rotation
    #   copy:
    #     content: |
    #       /var/log/blindassist/*.log {
    #           daily
    #           rotate 7
    #           compress
    #           delaycompress
    #           missingok
    #           notifempty
    #           create 644 {{ app_user }} {{ app_user }}
    #           postrotate
    #               systemctl reload {{ service_name }} > /dev/null 2>&1 || true
    #           endscript
    #       }
    #     dest: /etc/logrotate.d/blindassist
    #     mode: '0644'

    # - name: Enable and configure SSH
    #   lineinfile:
    #     path: /etc/ssh/sshd_config
    #     regexp: '^#?{{ item.key }}'
    #     line: '{{ item.key }} {{ item.value }}'
    #     backup: yes
    #   loop:
    #     - { key: 'PermitRootLogin', value: 'no' }
    #     - { key: 'PasswordAuthentication', value: 'yes' }
    #     - { key: 'PubkeyAuthentication', value: 'yes' }

    - name: Enable services
      systemd:
        name: "{{ item }}"
        enabled: yes
        daemon_reload: yes
      loop:
        - ssh
        - bluetooth
        - "{{ service_name }}"

    - name: Clean up package cache
      apt:
        autoclean: yes
        autoremove: yes

    - name: Display deployment summary
      debug:
        msg:
          - "✅ BlindAssist deployment completed successfully!"
          - "📁 Application directory: {{ app_dir }}"
          - "👤 Service user: {{ app_user }}"
          - "🚀 Service name: {{ service_name }}"
          - "📝 Logs: /var/log/blindassist/"
          - "🔧 Config: {{ app_dir }}/config/config.yml"
          - "📊 Build info: {{ app_dir }}/build-info.txt"