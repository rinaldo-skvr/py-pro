name: Build 3Netra POC Golden Image

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  IMAGE_NAME: "blindassist-orangepi"
  BASE_IMAGE_PATH: "base-image/Orangepizero2w_1.0.0_ubuntu_jammy_server_linux6.1.31.img"

jobs:
  build-golden-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        lfs: true  # Enable Git LFS for large base image

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          qemu-user-static \
          parted \
          kpartx \
          xz-utils \
          ansible \
          dosfstools \
          e2fsprogs \
          p7zip-full

    - name: Download and extract base image
      run: |
        mkdir -p base-image
        cd base-image
        
        # Download base image from GitHub release
        echo "Downloading base image package..."
        wget -q https://github.com/${{ github.repository }}/releases/download/base-image-v1/base-image.zip
        
        # Check if download was successful
        if [ ! -s "base-image.zip" ]; then
          echo "Failed to download base image"
          cat "base-image.zip"  # Show error message if any
          exit 1
        fi
        
        # Extract the zip file
        echo "Extracting base image files..."
        unzip base-image.zip
        
        # Verify checksum
        echo "Verifying checksum..."
        sha256sum -c Orangepizero2w_1.0.0_ubuntu_jammy_server_linux6.1.31.img.sha
        
        # Clean up archive file
        rm base-image.zip
        
        cd ..

    - name: Prepare working image
      run: |
        # Create working copy of base image
        cp "${{ env.BASE_IMAGE_PATH }}" working-image.img
        
        # Expand image size for additional software (add 2GB)
        echo "Expanding image size..."
        dd if=/dev/zero bs=1M count=2048 >> working-image.img
        
        # Fix partition table and resize
        echo "Resizing partition..."
        sudo parted working-image.img print
        
        # Get the number of the last partition
        LAST_PART=$(sudo parted working-image.img print | tail -n 2 | head -n 1 | awk '{print $1}')
        
        # Resize the last partition to use all available space
        sudo parted -s working-image.img unit % resizepart ${LAST_PART} 100%

    - name: Mount image and setup chroot
      run: |
        # Get the last partition number again
        LAST_PART=$(sudo parted working-image.img print | tail -n 2 | head -n 1 | awk '{print $1}')
        
        # Setup loop device
        sudo losetup -P /dev/loop0 working-image.img
        
        # Wait for partitions to appear
        sleep 3
        
        # Resize filesystem
        sudo e2fsck -f /dev/loop0p${LAST_PART} -y || true
        sudo resize2fs /dev/loop0p${LAST_PART}
        
        # Create mount point
        sudo mkdir -p /mnt/orangepi
        
        # Mount root partition (using detected partition number)
        sudo mount /dev/loop0p${LAST_PART} /mnt/orangepi
        
        # Check if boot partition exists and mount it
        if [ -e /dev/loop0p1 ]; then
            sudo mount /dev/loop0p1 /mnt/orangepi/boot
        else
            echo "No separate boot partition found, continuing without mounting boot"
        fi
        
        # Setup qemu for ARM64 emulation
        sudo cp /usr/bin/qemu-aarch64-static /mnt/orangepi/usr/bin/
        
        # Mount system directories for chroot
        sudo mount --bind /dev /mnt/orangepi/dev
        sudo mount --bind /proc /mnt/orangepi/proc
        sudo mount --bind /sys /mnt/orangepi/sys
        sudo mount -t devpts devpts /mnt/orangepi/dev/pts

    - name: Run Ansible playbook
      run: |
        export ANSIBLE_HOST_KEY_CHECKING=False
        ansible-playbook -i ansible/inventory.yml \
          ansible/deploy-3netra-poc.yml \
          --extra-vars "github_sha=${{ github.sha }}" \
          --extra-vars "build_date=$(date +%Y%m%d)" \
          -v

    - name: Cleanup and create final image
      run: |
        # Cleanup chroot environment
        sudo umount /mnt/orangepi/dev/pts || true
        sudo umount /mnt/orangepi/dev || true
        sudo umount /mnt/orangepi/proc || true
        sudo umount /mnt/orangepi/sys || true
        sudo umount /mnt/orangepi/boot || true
        sudo umount /mnt/orangepi || true
        
        # Detach loop device
        sudo losetup -d /dev/loop0
        
        # Create final image name
        FINAL_IMAGE="${{ env.IMAGE_NAME }}-$(date +%Y%m%d)-${GITHUB_SHA:0:7}.img"
        mv working-image.img "$FINAL_IMAGE"
        
        # Compress image
        echo "Compressing final image..."
        xz -9 -T 0 "$FINAL_IMAGE"
        
        # Generate checksums
        sha256sum "${FINAL_IMAGE}.xz" > "${FINAL_IMAGE}.xz.sha256"
        
        # Store filenames in environment
        echo "FINAL_IMAGE_FILE=${FINAL_IMAGE}.xz" >> $GITHUB_ENV
        echo "CHECKSUM_FILE=${FINAL_IMAGE}.xz.sha256" >> $GITHUB_ENV

    - name: Upload golden image artifacts
      uses: actions/upload-artifact@v4
      with:
        name: blindassist-golden-image
        path: |
          ${{ env.FINAL_IMAGE_FILE }}
          ${{ env.CHECKSUM_FILE }}
        retention-days: 30

    - name: Create release on main branch
      if: github.ref == 'refs/heads/main'
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: build-${{ github.run_number }}
        release_name: Golden Image Build ${{ github.run_number }}
        body: |
          **BlindAssist Golden Image**
          
          **Build Info:**
          - Commit: ${{ github.sha }}
          - Date: $(date +%Y-%m-%d)
          - Image: ${FINAL_IMAGE_FILE}
          - Size: $(ls -lh "${FINAL_IMAGE_FILE}" | awk '{print $5}')
          
          **Flash Instructions:**
          ```bash
          # Download the image
          wget "${FINAL_IMAGE_FILE}"
          
          # Verify checksum
          sha256sum -c "${CHECKSUM_FILE}"
          
          # Extract and flash
          xz -d "${FINAL_IMAGE_FILE}"
          sudo dd if="${FINAL_IMAGE_FILE%.xz}" of=/dev/sdX bs=4M status=progress
          ```
        draft: false
        prerelease: false

    - name: Display build summary
      run: |
        echo "=========================================="
        echo "üéâ Golden Image Build Complete!"
        echo "=========================================="
        echo "üìÅ Final image: ${{ env.FINAL_IMAGE_FILE }}"
        echo "üìè Size: $(ls -lh ${{ env.FINAL_IMAGE_FILE }} | awk '{print $5}')"
        echo "üîê Checksum: $(cat ${{ env.CHECKSUM_FILE }} | cut -d' ' -f1)"
        echo "üìÖ Build date: $(date)"
        echo "üîó Commit: ${{ github.sha }}"
        echo "=========================================="